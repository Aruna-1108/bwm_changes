[
{"name":"Employee check in - Biometrics","owner":"Administrator","creation":"2025-09-15 10:09:29.790019","modified":"2025-09-23 15:02:52.438257","modified_by":"Administrator","docstatus":0,"idx":2,"script_type":"Scheduler Event","reference_doctype":"Employee Checkin","event_frequency":"Hourly","cron_format":"* * * * * ","doctype_event":"Before Insert","allow_guest":0,"disabled":1,"script":"# BACKFILL a fixed FROM→TO window for all configured devices, then AUTO-DISABLE this script.\r\n# Uses Active-only enforcement in essl_sync._insert_checkin (inactive employees are skipped).\r\n\r\n# IMPORTANT: Set this to the EXACT Name of THIS Server Script (shown in the form header)\r\nSCRIPT_NAME = \"Employee check in - Biometrics\"\r\n\r\n# ---- EDIT THESE DATES ----\r\nFROM_DT = \"2025-09-01 00:00:00\"\r\nTO_DT   = \"2025-09-24 00:00:00\"   # leave \"\" to use current time\r\n\r\ninserted_total = 0\r\ndevices = []\r\n\r\ntry:\r\n    # Resolve TO_DT if omitted\r\n    if not TO_DT:\r\n        try:\r\n            TO_DT = frappe.utils.now()\r\n        except Exception:\r\n            row = frappe.db.sql(\"SELECT CAST(NOW() AS CHAR) AS v\", as_dict=True)\r\n            TO_DT = row[0][\"v\"] if row else \"\"\r\n\r\n    # Pull device list (if helper exists)\r\n    dbg = frappe.call(\"bwm_custom.essl_sync.essl_conf_debug\") or {}\r\n    serials = dbg.get(\"serials\") or []\r\n\r\n    # If no devices returned, still run once with blank (function decides)\r\n    for sn in (serials or [\"\"]):\r\n        try:\r\n            res = frappe.call(\r\n                \"bwm_custom.essl_sync.essl_sync\",\r\n                from_datetime=FROM_DT,\r\n                to_datetime=TO_DT,\r\n                serial_number=sn,\r\n                preview=0\r\n            ) or {}\r\n\r\n            counts = (res or {}).get(\"counts\") or {}\r\n            add = int(counts.get(\"inserted\") or 0)\r\n            inserted_total = inserted_total + add  # avoid += in safe_exec\r\n\r\n            devices.append({\r\n                \"serial\": sn,\r\n                \"fetched\": int(counts.get(\"fetched\") or 0),\r\n                \"inserted\": add,\r\n                \"skipped_existing\": int(counts.get(\"skipped_existing\") or 0),\r\n                \"skipped_invalid\": int(counts.get(\"skipped_invalid\") or 0),\r\n                \"skipped_inactive\": int(counts.get(\"skipped_inactive\") or 0),\r\n                \"unmatched\": int(counts.get(\"unmatched\") or 0),\r\n            })\r\n        except Exception as e:\r\n            devices.append({\"serial\": sn, \"error\": str(e)})\r\n\r\n    # --- Build logs (no .format) ---\r\n    header = f\"ESSL backfill {FROM_DT} → {TO_DT or '<now>'}\"\r\n    totals_line = f\"TOTAL inserted: {inserted_total}\"\r\n\r\n    lines = [header, totals_line]\r\n    for d in devices:\r\n        if d.get(\"error\"):\r\n            ser = d.get(\"serial\") or \"<none>\"\r\n            lines.append(f\"- {ser}: ERROR: {d['error']}\")\r\n        else:\r\n            ser = d.get(\"serial\") or \"<none>\"\r\n            fch = d.get(\"fetched\")\r\n            ins = d.get(\"inserted\")\r\n            se  = d.get(\"skipped_existing\")\r\n            si  = d.get(\"skipped_invalid\")\r\n            si2 = d.get(\"skipped_inactive\")\r\n            u   = d.get(\"unmatched\")\r\n            lines.append(\r\n                f\"- {ser}: fetched={fch}, inserted={ins}, skipped_existing={se}, \"\r\n                f\"skipped_invalid={si}, skipped_inactive={si2}, unmatched={u}\"\r\n            )\r\n\r\n    # Log summary (safe)\r\n    frappe.log_error(title=\"essl_backfill_window\", message=\"\\n\".join(lines))\r\n    # Also echo a short line to scheduler console\r\n    frappe.errprint(f\"{header} | {totals_line}\")\r\n\r\nfinally:\r\n    # Auto-disable THIS script so it runs once.\r\n    try:\r\n        frappe.db.set_value(\"Server Script\", SCRIPT_NAME, \"disabled\", 1)\r\n        frappe.db.commit()\r\n    except Exception as e:\r\n        frappe.log_error(title=\"essl_backfill_disable_err\", message=f\"Disable failed: {e}\")\r\n","enable_rate_limit":0,"rate_limit_count":5,"rate_limit_seconds":86400,"doctype":"Server Script"},
{"name":"Essl Minutes wise","owner":"Administrator","creation":"2025-09-16 17:16:38.963315","modified":"2025-09-23 15:02:48.816517","modified_by":"Administrator","docstatus":0,"idx":0,"script_type":"Scheduler Event","reference_doctype":"Employee Checkin","event_frequency":"Cron","cron_format":"* * * * *","doctype_event":"Before Insert","allow_guest":0,"module":"","disabled":0,"script":"# Realtime multi-device tick (runs every minute)\r\n# Calls: bwm_custom.essl_sync.sync_realtime_tick\r\n\r\ntry:\r\n    out = frappe.call(\r\n        \"bwm_custom.essl_sync.sync_realtime_tick\",\r\n        overlap_seconds=90,\r\n        backfill_minutes_if_empty=10,\r\n        preview=0\r\n    ) or {}\r\n\r\n    totals = (out or {}).get(\"totals\") or {}\r\n    f = int(totals.get(\"fetched\") or 0)\r\n    i = int(totals.get(\"inserted\") or 0)\r\n    se = int(totals.get(\"skipped_existing\") or 0)\r\n    si = int(totals.get(\"skipped_invalid\") or 0)\r\n    u  = int(totals.get(\"unmatched\") or 0)\r\n\r\n    msg = f\"eSSL realtime tick OK: fetched={f}, inserted={i}, skipped_existing={se}, skipped_invalid={si}, unmatched={u}\"\r\n    frappe.errprint(msg)\r\n    log(msg)\r\n\r\nexcept Exception as e:\r\n    # safe-exec friendly error log (no get_traceback, no __class__ access)\r\n    err = f\"eSSL realtime tick FAILED: {str(e)}\"\r\n    frappe.errprint(err)\r\n    try:\r\n        frappe.log_error(title=\"essl_realtime_tick\", message=err)\r\n    except Exception:\r\n        pass\r\n","enable_rate_limit":0,"rate_limit_count":5,"rate_limit_seconds":86400,"doctype":"Server Script"}

]